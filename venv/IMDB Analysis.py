
import numpy as np
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns


##Low memory used based on Pycharm prompt
df = pd.read_csv ('IMDb movies1.csv', low_memory=False, sep=',', dtype={"worlwide_gross_income": int})
dtype={"genre": str, "director": str, "production_company": str, "year": str, "imdb_title_id": str}
print (df)

##Subset to Noughties decade
df_2010_2020 = df.loc[(df["year"] > 2009) & (df["year"] <= 2020)]
print (df_2010_2020)

##Subset to areas for analysis - genres, producers, year,worldwide gross income

df_ucd_anal = df_2010_2020[['genre', 'director', 'production_company', 'year', 'imdb_title_id', 'worlwide_gross_income', 'title', 'original_title']]
print(df_ucd_anal.head)

##Check for missing data in df
print(df_ucd_anal.T.apply(lambda x: x.isnull().sum(), axis = 1))

##Handling missing value
df_ucd_anal.production_company.fillna("No production company provided", inplace=True)
df_ucd_anal.director.fillna("No director provided", inplace=True)

##Check for missing data after update
print(df_ucd_anal.T.apply(lambda x: x.isnull().sum(), axis = 1))

##Check that Worldwide income is a value that can be summed
print(df_ucd_anal["worlwide_gross_income"].dtypes)

##Sort data based on highest value
prd_valuecheck = df_ucd_anal[["production_company", "worlwide_gross_income", "director"]]
print(prd_valuecheck.head())
prd_valuechecksrt = prd_valuecheck.sort_values("worlwide_gross_income", ascending=False)
print(prd_valuechecksrt.head())
prd_valuechecksrt['WWGross_income_millions'] = df_ucd_anal['worlwide_gross_income']/1000000
print(prd_valuechecksrt.dtypes)



Top_10_prod_com = prd_valuechecksrt.iloc[0:10,:3]
print(Top_10_prod_com.head(10))
Top_10_prod_com['Total'] = prd_valuechecksrt.WWGross_income_millions.sum()
print(Top_10_prod_com.head(10))

#1new. Top Production Company by top 10 grossing movies

plt.figure(figsize=(18,7))
plt.title('Distribution of the top 10 Grossing Films  by production company')
sns.countplot(y = Top_10_prod_com.production_company)
plt.xlabel('Releases')
plt.ylabel('Production Company')
plt.show()
plt.close()

#1b. Distribution of value



top10tokeep = ['Universal Pictures', 'Columbia Pictures', 'Warner Bros.',
       'Paramount Pictures', 'Summit Entertainment', 'Twentieth Century Fox',
       'CJ Entertainment', 'Lionsgate', 'Walt Disney Pictures', 'BBC Films']
top10df =prd_valuechecksrt[prd_valuechecksrt.production_company.isin(top10tokeep)]
print(top10df.shape)
top10df['Total'] = top10df.WWGross_income_millions.sum()
print(top10df.head(10))

#1b. I should of use a dictionary to enable me to append the data to original top10tokeep subset. top3 = ['Lucasfilm', 'Marvel Studios', 'Walt Disney Animation Studios'].
#top3 = ['Lucasfilm', 'Marvel Studios', 'Walt Disney] could have been be added using .append

top13tokeep = ['Universal Pictures', 'Columbia Pictures', 'Warner Bros.',
       'Paramount Pictures', 'Summit Entertainment', 'Twentieth Century Fox',
       'CJ Entertainment', 'Lionsgate', 'Walt Disney Pictures', 'BBC Films','Lucasfilm', 'Marvel Studios', 'Walt Disney Animation Studios']

top13df =prd_valuechecksrt[prd_valuechecksrt.production_company.isin(top13tokeep)]
print(top13df.shape)
top13df['Total'] = top13df.WWGross_income_millions.sum()
print(top13df.head(13))

print(334338-129662)
listfor_pie = [129662, 204676]

#Second pie chart including 3 new companies
plt.figure(figsize=(12,6))
plt.title("Percentage of revenue generated by Top 10 production companies in 2010 - 2020")
g = plt.pie(listfor_pie,explode=(0.1,0), labels=['Top 10 production companies','Others'], colors=['blue','red'],autopct='%1.1f%%', startangle=90)
plt.show()
plt.close()

#1bcont. From ascertaining value in above list, I could not find a smart way to drop the values into the pie chart
print(334338-204676)
listfor_pie1 = [148273, 186065]

plt.figure(figsize=(12,6))
plt.title("Revenue generated by Top 13 Production companies of Value & Volume in 2010 - 2020")
g = plt.pie(listfor_pie1 ,explode=(0.1,0), labels=['Top 13 production companies','Others'], colors=['blue','red'],autopct='%1.1f%%', startangle=90)
plt.show()
plt.close()

#1. Production Company by the Amount of the films release
filtered_prod = df_ucd_anal.set_index('title').production_company.str.split(', ', expand=True).stack().reset_index(level=1, drop=True);
filtered_prod = filtered_prod[filtered_prod != 'No production company provided']
plt.figure(figsize=(18,7))
g = sns.countplot(y = filtered_prod, order=filtered_prod.value_counts().index[:10])
plt.title('Top 10 Production Companies between 2010-2020')
plt.xlabel('Titles')
plt.ylabel('Production Company')
plt.show()
plt.close()
print(filtered_prod.value_counts().index)


#2. Top Directors by film in decade
filtered_directors = df_ucd_anal[df_ucd_anal.director != 'No director provided'].set_index('title').director.str.split(', ', expand=True).stack().reset_index(level=1, drop=True)

plt.figure(figsize=(15,7))
plt.title('Top 10 Director Based on The Number of Titles')
sns.countplot(y = filtered_directors, order=filtered_directors.value_counts().index[:10])
plt.xlabel('Releases')
plt.show()
plt.close()


#3. Number of releases per Calender year

trop_prod_by_yeardf = df_ucd_anal.groupby(["year"])["worlwide_gross_income"].count().reset_index()
print(trop_prod_by_yeardf.head())

prodcomp_byrevenue = df_ucd_anal.groupby(["year"])["worlwide_gross_income"].sum().reset_index()
print(prodcomp_byrevenue.head())

#3updated. Number of releases per Calender year & Revenue. Two lines on one graph
# create figure and axis objects with subplots()
fig,ax = plt.subplots()
ax.plot(prodcomp_byrevenue.year, prodcomp_byrevenue.worlwide_gross_income, color="red", marker="o")
# set x-axis label
ax.set_xlabel("year")
# set y-axis label
ax.set_ylabel("worlwide_gross_income(m)",color="red")
# twin object for two different y-axis on the sample plot
ax2=ax.twinx()
# make a plot with different y-axis using second axis object
ax2.plot(trop_prod_by_yeardf.year, trop_prod_by_yeardf.worlwide_gross_income,color="blue",marker="o")
ax2.set_ylabel("No. of release",color="blue")
ax2.set_title("Annual Revuenue & Output by Year")
plt.show()
plt.close()

#lines 135 to 167 using a get url request to pull in a CSV file from Kaggle. Data set no used in end, but code left into demonstrate URL request

#import requests
#import io

# Username of your GitHub account

# username = 'swaters1806'

# Personal Access Token (PAO) from your GitHub account. Token value changed

# token = 'e8206249ccd0291d06006e8825d28dd869b16b02'

# Creates a re-usable session object with your creds in-built

# github_session = requests.Session()
# github_session.auth = (username, token)

# Downloading the csv file from your GitHub

# url = "https://raw.githubusercontent.com/dwiknrd/medium-code/master/netflix-eda/netflix_titles.csv"  # Make sure the url is the raw version of the file on GitHub
# download = github_session.get(url).content

# Reading the downloaded content and making it a pandas dataframe

# df = pd.read_csv(io.StringIO(download.decode('utf-8')))

# Printing out the first 5 rows of the dataframe to make sure everything is good

# print(df.head())

# saving the dataframe
#df.to_csv('Netflix_data.csv')

# print(df.shape)










